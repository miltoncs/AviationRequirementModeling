package AviateControlLevel
public
	with Base_Types;
	
	data autopilot
	end autopilot;
	
	data implementation autopilot.autopilot_impl
		subcomponents
			VV: data  Base_Types::float;
			DeltaHeading:  data  Base_Types::float;
			Airspeed:  data  Base_Types::float;
	end autopilot.autopilot_impl;
	
	
	
	-- GCAS monitor receives 6D position, 6D velocity data and outputs  expected loss as a cost function
	process GCAS_Monitor
		features
			--Inputs to the GCAS Monitor
--			latitude: in data port Base_Types::float; 
--			longitude: in data port Base_Types::float;
			altitude: in data port Base_Types::float;
--			rollAngle: in data port Base_Types::float;
--			pitchAngle: in data port Base_Types::float;
--			yawAngle: in data port Base_Types::float;
--			northVelocity: in data port Base_Types::float;
--			eastVelocity: in data port Base_Types::float;
			verticalVelocity: in data port Base_Types::float;
--			rollRate: in data port Base_Types::float;
--			pitchRate: in data port Base_Types::float;
--			yawRate: in data port Base_Types::float;
			--Output from the GCAS monitor
			outImpact: out data port Base_Types::float;
			outRecovery: out data port Base_Types::float;
			gcasRequested: out data port Base_Types::boolean;
			-- time to fly up <= 0.5 seconds enable GCASRequested
			-- vertical acceleration you can achieve 
			annex agree{**
					eq timeToMinAltitude: real;
					eq altitudeFromGround: real;
					eq horizontalDistance:real;
					eq verticalDistance:real;
					eq distance: real;
					eq velocity:real;
					eq verticalAccelaration:real = 100.0;
					eq timetoImpact: real = 15.0;
					eq timetoRecovery:real = 5.0;
					--	Traveler shall be able to fly within 30’ of terrain nuisance free
					--altitude measured in feet
					guarantee"GCAS activated when terrain closer than 30'": true-> altitude <=30.0 => gcasRequested;
					
					--	Traveler shall prevent CFIT against known terrain prior to takeoff
					
					
					-- A terrain clearance buffer (TCB) for test purposes shall be able to be adjusted during flight
							--TCB provides additional separation from terrain both horizontally and vertically
					guarantee"safe horizontal and vertical distance maintained":true-> verticalDistance <=30.0 and 
					horizontalDistance<=30.0 => gcasRequested;
					
--					assume "roll rate range not violated": rollRate>=10.0 and rollRate<=15.0;
					guarantee"GCAS impact":outImpact = timetoImpact;
					guarantee"GCAS recovery":outRecovery = timetoRecovery;
					
					
			**};
				
	end GCAS_Monitor;
	
	Process implementation GCAS_Monitor.GCAS_Monitor_impl
			annex agree{**
				assign timeToMinAltitude = 0.5;
				assign altitudeFromGround = Agree_Nodes.height(verticalAccelaration, timeToMinAltitude, verticalVelocity, altitude);
				assign gcasRequested = true -> if altitudeFromGround <= 500.0 then true else false;
--				assign altitude = altitudeFromGround;
				assign outRecovery = 0.0-> timetoRecovery;
				assign outImpact = 0.0->timetoImpact;
			**};
	end GCAS_Monitor.GCAS_Monitor_impl;
	
	-- ACAS Monitor
	Process ACAS_Monitor
		features
			latitude: in data port Base_Types::float;
			longitude: in data port Base_Types::float;
			distance: in data port Base_types::float;
			outImpact: out data port Base_Types::float;
			outRecovery: out data port Base_Types::float;
			acasRequested: out data port Base_Types::Boolean;
			annex agree{**
					eq timetoImpact: real = 8.0;
					eq timetoRecovery:real = 5.0;
					--Traveler shall be able to fly within 10’ of obstacle nuisance free
					guarantee"ACAS activated": distance <= 10.0 => acasRequested;
					--	Traveler shall prevent collision with known obstacles prior to takeoff
					-- 	Obstacle data shall include monetary value
					--	An obstacle clearance buffer (OCB) for test purposes shall be able to be adjusted during flight
						-- OCB provides additional separation from obstacles both horizontally and vertically
					guarantee"ACAS impact":outImpact = timetoImpact;
					guarantee"ACAS recovery":outRecovery = timetoRecovery;
			**};
	end ACAS_Monitor;
	Process implementation ACAS_Monitor.ACAS_Monitor_impl
	annex agree{**
			assign outRecovery = 0.0-> timetoRecovery;
			assign outImpact = 0.0->timetoImpact;
	**};
	
	end ACAS_Monitor.ACAS_Monitor_impl;
	
	-- Separation Assurance monitor
	Process SA_Monitor
		features
			horzDistance: in data port Base_types::float;
			vertDistance: in data port Base_types::float;
			saRequested: out data port Base_Types::Boolean;
			annex agree{**
					--Traveler shall be able to fly within 10’ of obstacle nuisance free
					
				guarantee"Separation Assurance activated": horzDistance = 10.0 and vertDistance =10.0 => saRequested;
			**};
	end SA_Monitor;
	Process implementation SA_Monitor.SA_Monitor_impl
	
	end SA_Monitor.SA_Monitor_impl;
	
	Process GF_Monitor
		features
			latitude: in data port Base_Types::float;
			longitude: in data port Base_Types::float;
			distance: in data port Base_types::float;
			gfRequested: out data port Base_Types::Boolean;
			annex agree{**
			-- Traveler shall prevent flight into unauthorized airspace
			-- Horizontal airspace boundaries shall be defined in latitude and longitude
				guarantee"Geo Fence activated": latitude = 10.0 and longitude =15.0 => gfRequested;
			--  Vertical airspace boundaries:
			--	shall be defined for both a floor and ceiling
			--	shall be able to be defined in either/both altitude AGL or WGS-84 depending on the specific boundary
			--	Airspace boundaries shall be able to be updated in flight during a mission
			--	Airspace criticality shall be included with the airspace boundary definition
					
			**};
	end GF_Monitor;
	Process implementation GF_Monitor.GF_Monitor_impl
	
	end GF_Monitor.GF_Monitor_impl;
	
	Process Wx_Monitor
		features
			latitude: in data port Base_Types::float;
			longitude: in data port Base_Types::float;
			distance: in data port Base_types::float;
			wxRequested: out data port Base_Types::Boolean;
			annex agree{**
				guarantee"Weather avoidance activated": latitude = 10.0 and longitude =15.0  => wxRequested;
			**};
	end Wx_Monitor;
	Process implementation Wx_Monitor.Wx_Monitor_impl
	
	end Wx_Monitor.Wx_Monitor_impl;
	
	
	Process FLS_Monitor
		features
			linkConnection: in data port Base_Types::boolean;
			landingRequested: out data port Base_Types::boolean;
	end FLS_Monitor;
	
	
	Process Aviate_Decider
	features
			inpGCASM : in data port Base_Types::boolean;
			inpGCASImpact: in data port Base_Types::float;
			inpGCASRecovery: in data port Base_Types::float;
			inpSAM : in data port Base_Types::boolean;
			inpACASM : in data port Base_Types::boolean;
			inpACASImpact: in data port Base_Types::float;
			inpACASRecovery: in data port Base_Types::float;
			inpGFM : in data port Base_Types::boolean;
			inpWxM : in data port Base_Types::boolean;
			inpFLS: in data port Base_Types::boolean;
--			inpGCASAlt: in data port Base_Types::float;
--			inpGCASTime: in data port Base_Types::float;
			outDec: out data port Base_Types::integer;
			
			annex agree{**
				eq rangeX: int;
				eq rangeY:int;
				eq injuryCost: int;
				eq staticDecide:int;
				eq dynamicDecide: int;
				eq gradGCASM: real;
				eq timeToGnd:real;
				eq timeToAircraft:real;
				eq numberServicesTrue:int;
--				Verification for static priority 
				guarantee"FLS selected even when other lower priority": inpFLS and inpGCASM => outDec = 1;
				guarantee"FLS enabled doesnt allow selection of other actions": inpFLS and inpGCASM => outDec =2;

--				Context dependecy based priority
--				guarantee"GCAS first always saves collision":true-> inpGCASRecovery <= inpACASImpact;
				guarantee"Ranges evaluate to value in the implementation": rangeX>=4 and rangeY<=8 => injuryCost >=500;
				guarantee"Priority changes based on context": true-> numberServicesTrue >= 2 and inpGCASM and inpACASM => outDec = staticDecide;

			**};
			
	
	end Aviate_Decider;
	
	--context dependency --computing priority
	Process Implementation Aviate_Decider.Aviate_Decider_impl 
	annex agree{**

					-- 1=>FLS, 2=>GCASM, 3=>ACASM, 4=>GFM, 5=>SAM, 6=>WxM, 7=> piltoing command
					assign staticDecide = if inpFLS then 1
									else if inpGCASM then 2
									else if inpACASM then 3
									else if inpGFM then 4
									else if inpSAM then 5
									else if inpWxM then 6
									else 7;
									
--				Context dependecy based priority
-- time to recovery of both is less than maximum time to impact then solution exists otherwise it doesnt
-- time to recover is greater than equal to timetoimpact for the other control then choose the other control
					
					assign numberServicesTrue = if inpFLS and not inpGCASM and not inpACASM and not inpGFM and not inpSAM and not inpWxM then 1
					else if not inpFLS and inpGCASM and not inpACASM and not inpGFM and not inpSAM and not inpWxM then 1
					else if not inpFLS and not inpGCASM and inpACASM and not inpGFM and not inpSAM and not inpWxM then 1
					else if not inpFLS and not inpGCASM and not inpACASM and inpGFM and not inpSAM and not inpWxM then 1
					else if not inpFLS and not inpGCASM and not inpACASM and not inpGFM and inpSAM and not inpWxM then 1
					else if not inpFLS and not inpGCASM and not inpACASM and not inpGFM and not inpSAM and inpWxM then 1
					else if inpFLS and inpGCASM then 2
					else if inpFLS and inpACASM then 2
					else if inpFLS and inpGFM then 2
					else if inpFLS and inpSAM then 2
					else if inpFLS and inpWxM then 2
					else if inpGCASM and inpACASM then 2
					else if inpGCASM and inpGFM then 2
					else if inpGCASM and inpSAM then 2
					else if inpGCASM and inpWxM then 2
					else if inpACASM and inpGFM then 2
					else if inpACASM and inpSAM then 2
					else if inpACASM and inpWxM then 2
					else if inpGFM and inpSAM then 2
					else if inpGFM and inpWxM then 2
					else if inpSAM and inpWxM then 2
					else if inpFLS and inpGCASM and inpACASM and not inpGFM and not inpSAM and not inpWxM then 3
					else if inpFLS and inpGCASM and not inpACASM and inpGFM and not inpSAM and not inpWxM then 3
					else if inpFLS and inpGCASM and not inpACASM and not inpGFM and inpSAM and not inpWxM then 3
					else if inpFLS and inpGCASM and not inpACASM and not inpGFM and not inpSAM and inpWxM then 3
					else if not inpFLS and inpGCASM and inpACASM and inpGFM and not inpSAM and not inpWxM then 3
					else if not inpFLS and inpGCASM and  inpACASM and not inpGFM and inpSAM and not inpWxM then 3
					else if not inpFLS and inpGCASM and  inpACASM and not inpGFM and not inpSAM and inpWxM then 3
					else 4;
					
					
					assign dynamicDecide = if inpGCASImpact > inpACASImpact and inpACASRecovery + inpGCASRecovery < inpGCASImpact then
				3
				else
				2;
				
				assign outDec = if numberServicesTrue>=2 then dynamicDecide
							else staticDecide;
				
--					assign decide = if outDec = 2 and inpGCASM and inpACASM and gradGCASM >0.0 then 3
--									else if inpGCASM and inpACASM and timeToGnd> timeToAircraft then 3
--									else 2;  				
--					assign injuryCost = Agree_Nodes.distribution(rangeX, rangeY);
--					assign outDec = if rangeX >=4 and rangeY<=8 and (injuryCost >= 500) then 2
--									else 1;
-- any prevention against security attacks for example only authorized access allows critical changes
		
	**};
	end Aviate_Decider.Aviate_Decider_impl;
	
	--loss of control (outer level control decider gets input from aviate level and loss of control)
	--outer loop
	
	--Gets input to follow waypoint and then outputs Vertical Velocity, Heading and Airspeed
	Process Pilot_Command
		features
			inpPC: in data port Base_Types::float;
			outPC: out data port Autopilot.Autopilot_Impl;
--			outMGVV: out data port Base_Types::float;
--			outMGDeltaHeading: out data port Base_types::float;
--			outMGAirspeed: out data port Base_Types::float;
	end Pilot_Command;
	
--	Process FLS_Recovery
--		features
--			outFLSR: out data port autopilot.autopilot_impl;
--			annex agree{**
--				guarantee"dummy":true;
--			**};
--	end FLS_Recovery;
	
	--Outputs Vertical Velocity, Heading and Airspeed to execute pull wing as a ground avoidance strategy
	Process GCAS_Recovery
		features
			outGCASR: out data port autopilot.autopilot_impl;
			outImpact: out data port Base_Types::float;
			outRecovery: out data port Base_Types::float;
--			outGADeltaHeading: out data port Base_types::float;
--			outGAAirspeed: out data port Base_Types::float;
			outAltitude: out data port Base_Types::float;
			outTime: out data port Base_Types::float;
			annex agree{**
				eq altitude: real;
				eq timeRangeInitial: real;
				eq timeRangeFinal: real;
				assume"time range initial": timeRangeInitial>=0.0 and timeRangeInitial<=10.0;
				assume"time range final": timeRangeFinal>=0.0 and timeRangeFinal<=10.0;
				assume"time range final greater than initial": timeRangeFinal>timeRangeInitial;
--				initial velocity = 50, altitude = 100
--				guarantee"cannot override GCAS": timeRangeInitial>=5.5 => altitude>0.0;
--				guarantee"can override GCAS": timeRangeInitial>=5.6 => altitude>0.0;
--				initial velocity = 100, altitude = 100
--				guarantee"cannot override GCAS": timeRangeInitial>=6.9 => altitude>0.0;
--				guarantee"can override GCAS": timeRangeInitial>=7.0 => altitude>0.0;
--				initial velocity = 150, altitude = 100
				guarantee"cannot override GCAS": timeRangeInitial>=6.9 => altitude>0.0;
				guarantee"can override GCAS": timeRangeInitial>=8.9 => altitude>0.0;
				
				
			**};
			end GCAS_Recovery;
			
			Process implementation GCAS_Recovery.GCAS_Recovery_impl
			annex agree{**
				assign altitude = Agree_Nodes.gcasDynamics3(timeRangeInitial, timeRangeFinal);
--				assign outRecovery = 5.6;
--				assign outImpact = 10.0;
			**};
			end GCAS_Recovery.GCAS_Recovery_impl;
	
	Process ACAS_recovery
	features
	outACASRecovery: out data port Base_Types::float;
	outACASImpact:out data port Base_Types::float;
	end ACAS_recovery;
	
	Process Switch
		features
			inpDecider : in data port Base_Types::integer;
--			inpMGVV: in data port Base_Types::float;
--			inpMGDeltaHeading: in data port Base_Types::float;
--			inpMGAirspeed: in data port Base_Types::float;
--			inpGAVV: in data port Base_Types::float;
--			inpGADeltaHeading: in data port Base_Types::float;
--			inpGAAirspeed: in data port Base_Types::float;
			inpPC: in data port autopilot.autopilot_impl;
--			inpFLSR: in data port autopilot.autopilot_impl;
--			inpGCASR: in data port autopilot.autopilot_impl;
			outSwitchVV: out data port Base_Types::float;
			outSwitchDeltaHeading: out data port Base_Types::float;
			outSwitchAirspeed: out data port Base_Types::float;
--			annex agree{**
--				guarantee "FLS selected when needed": true-> inpDecider = 1=> 
--									outSwitchVV = inpFLSR.VV 
--									and outSwitchDeltaHeading = inpFLSR.DeltaHeading
--									and outSwitchAirspeed = inpFLSR.Airspeed;
--				-- constraining the inputs to maintain safer flight envelopes
----				assume "safe flight dynamics": inpMGVV>10.0 and inpMGVV<20.0;
--			**};
			
	end Switch;
	
--	Process implementation Switch.Switch_impl
--	annex agree{**
--				assign outSwitchVV = if inpDecider = 1 then 
--									inpFLSR.VV else
--									inpPC.VV;
--				assign outSwitchDeltaHeading = if inpDecider = 1 then 
--									inpFLSR.DeltaHeading else
--									inpPC.DeltaHeading;
--				assign outSwitchAirspeed = if inpDecider = 1 then 
--									inpFLSR.Airspeed else
--									inpPC.Airspeed;
--			**};
--	end Switch.Switch_impl;
	
--data ACL_output
--		
--end ACL_output;
--
--data implementation ACL_Output.ACL_Output_Impl
--	subcomponents
--			outACLVV: data  Base_Types::float;
--			outACLDeltaHeading:  data  Base_Types::float;
--			outACLAirspeed:  data  Base_Types::float;
--end ACL_Output.ACL_Output_Impl;
	
	
	system Aviate_Control_Level
		features
			inACL: in data port Base_Types::float; 
			inAircraftState: in data port Base_Types::float;
			outACLVV: out data port  Base_Types::float;
			outACLDeltaHeading:  out data port Base_Types::float;
			outACLAirspeed:  out data port  Base_Types::float;
			annex agree{**
					eq inputDecider:int;
					eq inputGCASRVV:real;
					eq inputFLSRVV:real;
					eq GCASEnabled:bool;
					eq GCASRecovery:real;
					eq ACASImpact:real;
				guarantee"FLS kicks in at the right time": true->inputDecider= 1 =>outACLVV = inputFLSRVV;
				guarantee"GCAS first always saves collision":true-> GCASRecovery <= ACASImpact;
--				guarantee"ACAS and GCAS emerging situation handled": maxImpact < GCASRecovery + ACASRecovery;
--				guarantee"can safely fly up": GCASEnabled=>outACLDeltaHeading>0.0;
			**};
			
	end Aviate_Control_Level;
	
	system implementation Aviate_Control_Level.Aviate_Control_Level_impl
		subcomponents
		gcasm: process GCAS_Monitor;
		acasm: process ACAS_Monitor;
		sam: process SA_Monitor;
		gfm: process GF_Monitor;
		wxm: process Wx_Monitor;
		flsm: process FLS_Monitor;
		
		pc: process Pilot_Command;
--		gcasr: process GCAS_Recovery;
--		flsr:process FLS_Recovery;
		dmc: process Aviate_Decider;
		swt: process Switch;
		connections
			acl_to_pc: port inACL -> pc.inpPC;
			
			--Connections from monitors to decider
			gcasm_to_decider: port gcasm.gcasRequested -> dmc.inpGCASM;
			gcasmimp_to_decider: port gcasm.outImpact -> dmc.inpGCASImpact;
			gcasrec_to_decider: port gcasm.outRecovery -> dmc.inpGCASRecovery;
			
			sam_to_decider: port sam.saRequested -> dmc.inpSAM;
			acasm_to_decider: port acasm.acasRequested -> dmc.inpACASM;
			acasmimp_to_decider: port acasm.outImpact -> dmc.inpACASImpact;
			acasrec_to_decider: port acasm.outRecovery -> dmc.inpACASRecovery;
			
			gfm_to_decider: port gfm.gfRequested -> dmc.inpGFM;
			wxm_to_decider: port wxm.wxRequested -> dmc.inpWxM;
			flsm_to_decider: port flsm.landingRequested -> dmc.inpFLS;
			
			--Connection from recovery or PC to switch
			pc_to_swt: port pc.outPC->swt.inpPC;
--			flsr_to_swt: port flsr.outFLSR->swt.inpFLSR;
--			gcasr_to_swt: port gcasr.outGCASR->swt.inpGCASR;
--			gcasr_to_decalt: port gcasr.outAltitude->dec.inpGCASAlt;
--			gcasr_to_dectime: port gcasr.outTime->dec.inpGCASTime;
			
			dec_to_switch: port dmc.outDec -> swt.inpDecider;
			switchvv_to_aclvv: port swt.outSwitchVV -> outACLVV;
			switchdeltaheading_to_acldeltaheading: port swt.outSwitchDeltaHeading -> outACLDeltaHeading;
			switchAirspeed_to_aclAirspeed: port swt.outSwitchAirspeed -> outACLAirspeed;
			annex agree{**
				assign inputDecider = swt.inpDecider;
				--Assigning FLSR output to a variable to prove FLSR is selected by the ACL system when needed
--				assign inputFLSRVV = flsr.outFLSR.VV;
--				assign inputGCASRVV = gcasr.outGCASR.VV;
				assign GCASEnabled = gcasm.gcasRequested;
				assign GCASRecovery = dmc.inpGCASRecovery;
				assign ACASImpact = dmc.inpGCASImpact;
				
				
			**};
	end Aviate_Control_Level.Aviate_Control_Level_impl;
end AviateControlLevel;