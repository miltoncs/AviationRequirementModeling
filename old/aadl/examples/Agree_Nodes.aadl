package Agree_Nodes
public
annex agree{**
		
node closeAndAbove(x: real, y:real, b:real) returns (z:bool);
let
	z = x > y and x-y <= b;
tel;

node closeAndBelow(x: real, y:real, b:real) returns (z:bool);
let
	z = closeAndAbove(y, x, b);
tel;
	
node multiplication(x:real, t:real) returns (y:real);
let
	y = if t = 1.0 then x else
		if t = 2.0 then x+x else
		if t = 3.0 then x+x+x else
		if t = 4.0 then x+x+x+x else
		if t = 5.0 then x+x+x+x+x else
		if t = 6.0 then x+x+x+x+x+x else
		if t = 7.0 then x+x+x+x+x+x+x else
		0.0;
tel;	
		
-- cubic distribution
node distribution(x1: int, x2: int) returns(y:int);
let
	y = if x1>0 and x2<=1 then 1*x2 
		else if x1>1 and x2<=2 then 7*x2 - 6
		else if x1>2 and x2<=3 then 19*x2 - 30
		else if x1>3 and x2<=4 then 37*x2 - 84
		else if x1>4 and x2<=5 then 61*x2 - 180
		else if x1>5 and x2<=6 then 91*x2 - 330
		else if x1>6 and x2<=7 then 127*x2 - 546
		else if x1>8 and x2<=8 then 169*x2 - 840
		else 217*x2 - 1224;

tel;	
-- GCAS dynamics
node gcasDynamics(x1: real, x2:real) returns(y:real);
let
	y = if x1>=0.0 and x2<=1.0 then -52.5*x1 
		else if x1>=1.0 and x2<=2.0 then -47.5*x1 - 5.0
		else if x1>=2.0 and x2<=3.0 then -27.5*x1 - 45.0
		else if x1>=3.0 and x2<=4.0 then 7.50*x1 - 150.0
		else if x1>=4.0 and x2<=5.0 then 57.5*x1 - 350.0
		else if x1>=5.0 and x2<=6.0 then 122.5*x1 - 675.0
		else if x1>=6.0 and x2<=7.0 then 202.5*x1 - 1155.0
		else if x1>=8.0 and x2<=9.0 then 297.5*x1 - 1820.0
		else if x1>=9.0 and x2<=10.0 then 407.5*x1 - 2700.0 
		else 967.5;
tel;	

node gcasDynamics2(x1: real, x2:real) returns(y:real);
let
	y = if x1>=0.0 and x2<=1.0 then -102.5*x1 
		else if x1>=1.0 and x2<=2.0 then -97.5*x1 - 5.0
		else if x1>=2.0 and x2<=3.0 then -77.5*x1 - 45.0
		else if x1>=3.0 and x2<=4.0 then -42.50*x1 - 150.0
		else if x1>=4.0 and x2<=5.0 then 7.5*x1 - 350.0
		else if x1>=5.0 and x2<=6.0 then 72.5*x1 - 675.0
		else if x1>=6.0 and x2<=7.0 then 152.5*x1 - 1155.0
		else if x1>=8.0 and x2<=9.0 then 247.5*x1 - 1820.0
		else if x1>=9.0 and x2<=10.0 then 357.5*x1 - 2700.0 
		else 517.5;
tel;

node gcasDynamics3(x1: real, x2:real) returns(y:real);
let
	y = if x1>=0.0 and x2<=1.0 then -152.5*x1 
		else if x1>=1.0 and x2<=2.0 then -147.5*x1 - 5.0
		else if x1>=2.0 and x2<=3.0 then -127.5*x1 - 45.0
		else if x1>=3.0 and x2<=4.0 then -92.50*x1 - 150.0
		else if x1>=4.0 and x2<=5.0 then -42.5*x1 - 350.0
		else if x1>=5.0 and x2<=6.0 then 22.5*x1 - 675.0
		else if x1>=6.0 and x2<=7.0 then 102.5*x1 - 1155.0
		else if x1>=8.0 and x2<=9.0 then 197.5*x1 - 1820.0
		else if x1>=9.0 and x2<=10.0 then 307.5*x1 - 2700.0 
		else 67.5;
tel;		

node gcasDynamics4(x1: real, x2:real) returns(y:real);
let
	y = if x1>=0.0 and x2<=1.0 then -158.0*x1 
		else if x1>=1.0 and x2<=2.0 then -166.0*x1 - 5.0
		else if x1>=2.0 and x2<=3.0 then -162.0*x1 - 45.0
		else if x1>=3.0 and x2<=4.0 then -146.0*x1 - 150.0
		else if x1>=4.0 and x2<=5.0 then -118.0*x1 - 350.0
		else if x1>=5.0 and x2<=6.0 then -78.0*x1 - 675.0
		else if x1>=6.0 and x2<=7.0 then -26.0*x1 - 1155.0
		else if x1>=8.0 and x2<=9.0 then 38.0*x1 - 1820.0
		else if x1>=9.0 and x2<=10.0 then 114.0*x1 - 2700.0 
		else 0.0;
tel;		



node height(va: real, t:real, vvInitial:real, altInitial:real) returns(altitude:real);
let
	-- in actual implementation it will evaluate the equation 0.5*VA*t^2 + V(0)*t + altitude(0);
	altitude = if vvInitial = -100.0 and altInitial<=500.0 then 
				462.5 
				else if vvInitial = -50.0 then 
				487.5 else 
				500.0;
	
tel;



 node match(inputValue:int) returns(b:bool);
 let 
 	b = if inputValue = 11 then true else false;
 tel;
 
node findAttackType(requestPattern:int) returns(attackType:int);
let
	attackType = if requestPattern = 11 then 12
	else 12;
	
tel;

node selectDefense(typeOfAttack:int) returns(defense:int);

let
	defense = if typeOfAttack = 12 and pre(defense) != 13 then 13
	else if typeOfAttack = 12 and pre(defense) != 23 then 23
	else if typeOfAttack = 12 and pre(defense) != 33 then 33
	else if typeOfAttack = 12 and pre(defense) != 43 then 43
	else 53;
tel;

node accessResponse(response:int) returns(access:bool);
 let 
 	access = if response = 20 then false 
 	else if response = 30 then false 
 	else if response = 40 then false 
 	else true;
 tel;

node delay(response:int) returns(t:int);
 let 
 	t = if response = 20 then 2 
 	else if response = 30 then 4
 	else if response = 40 then 5
 	else 10;
 tel;
 
 node effected(response:int) returns(t:int);
 let 
 	t = if response = 20 then 100 
 	else if response = 30 then 60 
 	else if response = 40 then 1 
 	else 0;
 tel;
	
  ---------------------------------------------------------------------------------------------------
  -- Step returns current step of execution
  ---------------------------------------------------------------------------------------------------
  node Step() returns (n: int);
    let
      n = 0 -> pre(n) + 1;
      
     lemma "Step positive" : n >= 0;
    tel;
 

  ---------------------------------------------------------------------------------------------------
  -- Latches p
  ---------------------------------------------------------------------------------------------------
  node Latch(p: bool) returns (r: bool);
    let
      r = p -> p or pre(r);
    tel;
    
  -----------------------------------------------------------------------------------------------
  -- Converts a Boolean to an integer
  ---------------------------------------------------------------------------------------------------
  node b2i(b: bool) returns (i: int);
    let i = if b then 1 else 0; tel;
    
  ---------------------------------------------------------------------------------------------------
  -- Returns a stream true for the first n elements
  ---------------------------------------------------------------------------------------------------
  node tF(n: int) returns (r: bool);
    var
      c: int;
    let
      c = 1 -> (pre(c) + 1);
      r = (c <= n);
      
       lemma "tF counter positive" : c > 0;
    tel;
    
  ---------------------------------------------------------------------------------------------------
  -- Returns a stream true for the first n steps of clock clk
  ---------------------------------------------------------------------------------------------------
  node ctF(n: int, clk: bool) returns (r: bool);
    var
      c: int;
    let
      c =  b2i(clk) -> pre(c) + b2i(clk);
      r = (c <= n);
      
       lemma "ctF counter positive" : c >= 0;
    tel;
    
  ---------------------------------------------------------------------------------------------------
  -- Returns a stream false for the first n elements
  ---------------------------------------------------------------------------------------------------
  node fT(n: int) returns (r: bool);
    var
      c: int;
    let
      c = 1 -> (pre(c) + 1);
      r = (c > n);
      
      lemma "fT counter positve" : c > 0;
    tel;
  
  ---------------------------------------------------------------------------------------------------
  -- Returns a stream false for the first n steps of clock clk
  ---------------------------------------------------------------------------------------------------
  node cfT(n: int, clk: bool) returns (r: bool);
    var
      c: int;
    let
      c =  b2i(clk) -> pre(c) + b2i(clk);
      r = (c > n);
      
       lemma "cfT counter positive" : c >= 0;
    tel;
       
  ---------------------------------------------------------------------------------------------------
  -- Returns number of steps p has been true
  ---------------------------------------------------------------------------------------------------
  node Duration(p: bool) returns (r: int);
    let
      -- Counts the number of instants since p was last false
      r = if p then (1 -> pre(r) + 1) else 0;
      
      lemma "value_posnat" : r >= 0;
 
    tel;
    
  ---------------------------------------------------------------------------------------------------
  -- Returns number of steps since p has been true - zero if p never true
  ---------------------------------------------------------------------------------------------------
  node Since(p: bool) returns (r: int);
    let
      r = b2i(p) ->  if p then 1 else  if pre(r) = 0 then 0 else pre(r) + 1;
      
      lemma "value posnat" : r >= 0;
      lemma "zero till true" : not Latch(p) => (r = 0);
 
    tel;
       
  ---------------------------------------------------------------------------------------------------
  -- Returns whether P has been true within the last n steps
  ---------------------------------------------------------------------------------------------------
  node WithinN(p: bool, n: int) returns (r: bool);
    let
      r = Since(p) > 0 and Since(p) <= n;
    tel;
       
  ---------------------------------------------------------------------------------------------------
  -- Returns true if p is true for at least min and at most max Ssteps
  ---------------------------------------------------------------------------------------------------
  node Bounded(p: bool, min: int, max: int) returns (r: bool);
    let
      r = true -> (True_At_Least(p, min) and True_At_Most(p, max));
    tel;
     
  ---------------------------------------------------------------------------------------------------
  -- Returns true if p is always true for at least n steps 
  ---------------------------------------------------------------------------------------------------
  node True_At_Least(p: bool, n: int) returns (r: bool);
    var
      c: int;
    let
      -- Counts the number of steps p has been true
      c = b2i(p) -> if p then pre(c) + 1 else 0;
                           
      r = true -> ((pre(c) > 0 and pre(c) < n) => p);
      
      lemma "value_posnat" : c >= 0;
 
    tel;
    
  ---------------------------------------------------------------------------------------------------
  -- Returns true if p is true for at most n steps 
  ---------------------------------------------------------------------------------------------------
  node True_At_Most(p: bool, n: int) returns (r: bool);
    var
      c: int;
    let
      -- Counts the number of steps p has been true
      c = b2i(p) -> if p then pre(c) + 1 else 0;
                           
      r = true -> ((pre(c) = n) => not p);
      
      lemma "value_posnat" : c >= 0;
 
    tel;  
      
  ---------------------------------------------------------------------------------------------------
  -- Returns true on rising edge of p
  ---------------------------------------------------------------------------------------------------
  node Rise(p: bool) returns (r: bool);
    let
      r = false -> not pre(p) and p;
    tel;
    
  ---------------------------------------------------------------------------------------------------
  -- Returns true on falling edge of p
  ---------------------------------------------------------------------------------------------------
  node Fall(p: bool) returns (r: bool);
    let
      r = false -> pre(p) and not p;
    tel;
    
  ---------------------------------------------------------------------------------------------------
  -- Returns true when p changes
  ---------------------------------------------------------------------------------------------------
  node Changed(p: bool) returns (r: bool);
    let
      r = false -> p != pre(p);
    tel;
      
**};
	
end Agree_Nodes;